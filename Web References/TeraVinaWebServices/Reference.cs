// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace OZ_WINE_APP.TeraVinaWebServices {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MobileCellarMgt_Binding", Namespace="urn:microsoft-dynamics-schemas/codeunit/MobileCellarMgt")]
    public partial class MobileCellarMgt : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback LoginRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTeraVinaVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWorkOrderBatchOperationCompleted;
        
        private System.Threading.SendOrPostCallback PutBottlingActivityOperationCompleted;
        
        private System.Threading.SendOrPostCallback PutAdditionActivityOperationCompleted;
        
        /// CodeRemarks
        public MobileCellarMgt() {
            this.Url = "http://ozsql02.hq.oztera.com:7047/teravina/WS/TeraVina%20Demo/Codeunit/MobileCellarMgt";
        }
        
        public MobileCellarMgt(string url) {
            this.Url = url;
        }
        
        /// CodeRemarks
        public event LoginRequestCompletedEventHandler LoginRequestCompleted;
        
        /// CodeRemarks
        public event GetTeraVinaVersionCompletedEventHandler GetTeraVinaVersionCompleted;
        
        /// CodeRemarks
        public event GetWorkOrderBatchCompletedEventHandler GetWorkOrderBatchCompleted;
        
        /// CodeRemarks
        public event PutBottlingActivityCompletedEventHandler PutBottlingActivityCompleted;
        
        /// CodeRemarks
        public event PutAdditionActivityCompletedEventHandler PutAdditionActivityCompleted;
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/MobileCellarMgt:LoginRequest", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/MobileCellarMgt", ResponseElementName="LoginRequest_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/MobileCellarMgt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool LoginRequest(string username, string password, string location) {
            object[] results = this.Invoke("LoginRequest", new object[] {
                        username,
                        password,
                        location});
            return ((bool)(results[0]));
        }
        
        /// CodeRemarks
        public void LoginRequestAsync(string username, string password, string location) {
            this.LoginRequestAsync(username, password, location, null);
        }
        
        /// CodeRemarks
        public void LoginRequestAsync(string username, string password, string location, object userState) {
            if ((this.LoginRequestOperationCompleted == null)) {
                this.LoginRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginRequestOperationCompleted);
            }
            this.InvokeAsync("LoginRequest", new object[] {
                        username,
                        password,
                        location}, this.LoginRequestOperationCompleted, userState);
        }
        
        private void OnLoginRequestOperationCompleted(object arg) {
            if ((this.LoginRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginRequestCompleted(this, new LoginRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/MobileCellarMgt:GetTeraVinaVersion", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/MobileCellarMgt", ResponseElementName="GetTeraVinaVersion_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/MobileCellarMgt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public string GetTeraVinaVersion() {
            object[] results = this.Invoke("GetTeraVinaVersion", new object[0]);
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void GetTeraVinaVersionAsync() {
            this.GetTeraVinaVersionAsync(null);
        }
        
        /// CodeRemarks
        public void GetTeraVinaVersionAsync(object userState) {
            if ((this.GetTeraVinaVersionOperationCompleted == null)) {
                this.GetTeraVinaVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTeraVinaVersionOperationCompleted);
            }
            this.InvokeAsync("GetTeraVinaVersion", new object[0], this.GetTeraVinaVersionOperationCompleted, userState);
        }
        
        private void OnGetTeraVinaVersionOperationCompleted(object arg) {
            if ((this.GetTeraVinaVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTeraVinaVersionCompleted(this, new GetTeraVinaVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/MobileCellarMgt:GetWorkOrderBatch", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/MobileCellarMgt", ResponseElementName="GetWorkOrderBatch_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/MobileCellarMgt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public string GetWorkOrderBatch(string location) {
            object[] results = this.Invoke("GetWorkOrderBatch", new object[] {
                        location});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void GetWorkOrderBatchAsync(string location) {
            this.GetWorkOrderBatchAsync(location, null);
        }
        
        /// CodeRemarks
        public void GetWorkOrderBatchAsync(string location, object userState) {
            if ((this.GetWorkOrderBatchOperationCompleted == null)) {
                this.GetWorkOrderBatchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWorkOrderBatchOperationCompleted);
            }
            this.InvokeAsync("GetWorkOrderBatch", new object[] {
                        location}, this.GetWorkOrderBatchOperationCompleted, userState);
        }
        
        private void OnGetWorkOrderBatchOperationCompleted(object arg) {
            if ((this.GetWorkOrderBatchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWorkOrderBatchCompleted(this, new GetWorkOrderBatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/MobileCellarMgt:PutBottlingActivity", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/MobileCellarMgt", ResponseElementName="PutBottlingActivity_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/MobileCellarMgt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PutBottlingActivity(string bottlingNo, string date, decimal outputQty, string tankNo, decimal tankConsumedQty, decimal runTimeHours) {
            this.Invoke("PutBottlingActivity", new object[] {
                        bottlingNo,
                        date,
                        outputQty,
                        tankNo,
                        tankConsumedQty,
                        runTimeHours});
        }
        
        /// CodeRemarks
        public void PutBottlingActivityAsync(string bottlingNo, string date, decimal outputQty, string tankNo, decimal tankConsumedQty, decimal runTimeHours) {
            this.PutBottlingActivityAsync(bottlingNo, date, outputQty, tankNo, tankConsumedQty, runTimeHours, null);
        }
        
        /// CodeRemarks
        public void PutBottlingActivityAsync(string bottlingNo, string date, decimal outputQty, string tankNo, decimal tankConsumedQty, decimal runTimeHours, object userState) {
            if ((this.PutBottlingActivityOperationCompleted == null)) {
                this.PutBottlingActivityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPutBottlingActivityOperationCompleted);
            }
            this.InvokeAsync("PutBottlingActivity", new object[] {
                        bottlingNo,
                        date,
                        outputQty,
                        tankNo,
                        tankConsumedQty,
                        runTimeHours}, this.PutBottlingActivityOperationCompleted, userState);
        }
        
        private void OnPutBottlingActivityOperationCompleted(object arg) {
            if ((this.PutBottlingActivityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PutBottlingActivityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/MobileCellarMgt:PutAdditionActivity", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/MobileCellarMgt", ResponseElementName="PutAdditionActivity_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/MobileCellarMgt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PutAdditionActivity(string workOrderNo, string completedDate, string lotNos, string qtys, string unit) {
            this.Invoke("PutAdditionActivity", new object[] {
                        workOrderNo,
                        completedDate,
                        lotNos,
                        qtys,
                        unit});
        }
        
        /// CodeRemarks
        public void PutAdditionActivityAsync(string workOrderNo, string completedDate, string lotNos, string qtys, string unit) {
            this.PutAdditionActivityAsync(workOrderNo, completedDate, lotNos, qtys, unit, null);
        }
        
        /// CodeRemarks
        public void PutAdditionActivityAsync(string workOrderNo, string completedDate, string lotNos, string qtys, string unit, object userState) {
            if ((this.PutAdditionActivityOperationCompleted == null)) {
                this.PutAdditionActivityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPutAdditionActivityOperationCompleted);
            }
            this.InvokeAsync("PutAdditionActivity", new object[] {
                        workOrderNo,
                        completedDate,
                        lotNos,
                        qtys,
                        unit}, this.PutAdditionActivityOperationCompleted, userState);
        }
        
        private void OnPutAdditionActivityOperationCompleted(object arg) {
            if ((this.PutAdditionActivityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PutAdditionActivityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void LoginRequestCompletedEventHandler(object sender, LoginRequestCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetTeraVinaVersionCompletedEventHandler(object sender, GetTeraVinaVersionCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTeraVinaVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTeraVinaVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetWorkOrderBatchCompletedEventHandler(object sender, GetWorkOrderBatchCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWorkOrderBatchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWorkOrderBatchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void PutBottlingActivityCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void PutAdditionActivityCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}
